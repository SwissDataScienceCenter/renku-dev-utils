// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package users

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	OidcScopes = "oidc.Scopes"
)

// Defines values for SecretKind.
const (
	General SecretKind = "general"
	Storage SecretKind = "storage"
)

// AddPinnedProject defines model for AddPinnedProject.
type AddPinnedProject struct {
	// ProjectSlug The slug used to identify a project
	ProjectSlug ProjectSlug `json:"project_slug"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error struct {
		Code    int     `json:"code"`
		Detail  *string `json:"detail,omitempty"`
		Message string  `json:"message"`
	} `json:"error"`
}

// ModificationDate The date and time the secret was created or modified (this is always in UTC)
type ModificationDate = time.Time

// PinnedProjects The list of projects a user has pinned on their dashboard
type PinnedProjects struct {
	ProjectSlugs *[]ProjectSlugResponse `json:"project_slugs,omitempty"`
}

// ProjectSlug The slug used to identify a project
type ProjectSlug = string

// ProjectSlugResponse The slug used to identify a project
type ProjectSlugResponse = string

// SecretDefaultFilename Filename to give to this secret when mounted in Renku 1.0 sessions
type SecretDefaultFilename = string

// SecretKind Kind of secret
type SecretKind string

// SecretName The name of a user secret
type SecretName = string

// SecretPatch Secret metadata to be modified
type SecretPatch struct {
	// DefaultFilename Filename to give to this secret when mounted in Renku 1.0 sessions
	DefaultFilename *SecretDefaultFilename `json:"default_filename,omitempty"`

	// Name The name of a user secret
	Name *SecretName `json:"name,omitempty"`

	// Value Secret value that can be any text
	Value *SecretValue `json:"value,omitempty"`
}

// SecretPost Secret metadata to be created
type SecretPost struct {
	// DefaultFilename Filename to give to this secret when mounted in Renku 1.0 sessions
	DefaultFilename *SecretDefaultFilename `json:"default_filename,omitempty"`
	Kind            *SecretKind            `json:"kind,omitempty"`

	// Name The name of a user secret
	Name SecretName `json:"name"`

	// Value Secret value that can be any text
	Value SecretValue `json:"value"`
}

// SecretValue Secret value that can be any text
type SecretValue = string

// SecretWithId A Renku secret
type SecretWithId struct {
	DataConnectorIds UlidList `json:"data_connector_ids"`

	// DefaultFilename Filename to give to this secret when mounted in Renku 1.0 sessions
	DefaultFilename SecretDefaultFilename `json:"default_filename"`

	// Id ULID identifier
	Id Ulid `json:"id"`

	// Kind Kind of secret
	Kind SecretKind `json:"kind"`

	// ModificationDate The date and time the secret was created or modified (this is always in UTC)
	ModificationDate ModificationDate `json:"modification_date"`

	// Name The name of a user secret
	Name                 SecretName `json:"name"`
	SessionSecretSlotIds UlidList   `json:"session_secret_slot_ids"`
}

// SecretsList A list of secrets
type SecretsList = []SecretWithId

// SelfUserInfo Information about the currently logged in user
type SelfUserInfo struct {
	// Email User email
	Email *UserEmail `json:"email,omitempty"`

	// FirstName First or last name of the user
	FirstName *UserFirstLastName `json:"first_name,omitempty"`

	// Id Keycloak user ID
	Id UserId `json:"id"`

	// IsAdmin Whether the user is a platform administrator or not
	IsAdmin bool `json:"is_admin"`

	// LastName First or last name of the user
	LastName *UserFirstLastName `json:"last_name,omitempty"`

	// Username Handle of the user
	Username Username `json:"username"`
}

// ShowProjectMigrationBanner Should display project migration banner
type ShowProjectMigrationBanner = bool

// Ulid ULID identifier
type Ulid = string

// UlidList defines model for UlidList.
type UlidList = []Ulid

// UserEmail User email
type UserEmail = string

// UserFirstLastName First or last name of the user
type UserFirstLastName = string

// UserId Keycloak user ID
type UserId = string

// UserPreferences The object containing user preferences
type UserPreferences struct {
	// PinnedProjects The list of projects a user has pinned on their dashboard
	PinnedProjects PinnedProjects `json:"pinned_projects"`

	// ShowProjectMigrationBanner Should display project migration banner
	ShowProjectMigrationBanner *ShowProjectMigrationBanner `json:"show_project_migration_banner,omitempty"`

	// UserId Keycloak user ID
	UserId UserId `json:"user_id"`
}

// UserSecretKey defines model for UserSecretKey.
type UserSecretKey struct {
	// SecretKey The users secret key
	SecretKey *string `json:"secret_key,omitempty"`
}

// UserWithId defines model for UserWithId.
type UserWithId struct {
	// Email User email
	Email *UserEmail `json:"email,omitempty"`

	// FirstName First or last name of the user
	FirstName *UserFirstLastName `json:"first_name,omitempty"`

	// Id Keycloak user ID
	Id UserId `json:"id"`

	// LastName First or last name of the user
	LastName *UserFirstLastName `json:"last_name,omitempty"`

	// Username Handle of the user
	Username Username `json:"username"`
}

// Username Handle of the user
type Username = string

// UsersWithId defines model for UsersWithId.
type UsersWithId = []UserWithId

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// Error defines model for Error.
type Error = ErrorResponse

// DeleteUserPreferencesPinnedProjectsParams defines parameters for DeleteUserPreferencesPinnedProjects.
type DeleteUserPreferencesPinnedProjectsParams struct {
	// DeletePinnedParams query parameters
	DeletePinnedParams *struct {
		ProjectSlug *string `json:"project_slug,omitempty"`
	} `form:"delete_pinned_params,omitempty" json:"delete_pinned_params,omitempty"`
}

// GetUserSecretsParams defines parameters for GetUserSecrets.
type GetUserSecretsParams struct {
	UserSecretsParams *struct {
		// Kind Kind of secret
		Kind *SecretKind `json:"kind,omitempty"`
	} `form:"user_secrets_params,omitempty" json:"user_secrets_params,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	UserParams *struct {
		// ExactEmail Return the user(s) with an exact match on the email provided
		ExactEmail *string `json:"exact_email,omitempty"`
	} `form:"user_params,omitempty" json:"user_params,omitempty"`
}

// PostUserPreferencesPinnedProjectsJSONRequestBody defines body for PostUserPreferencesPinnedProjects for application/json ContentType.
type PostUserPreferencesPinnedProjectsJSONRequestBody = AddPinnedProject

// PostUserSecretsJSONRequestBody defines body for PostUserSecrets for application/json ContentType.
type PostUserSecretsJSONRequestBody = SecretPost

// PatchUserSecretsSecretIdJSONRequestBody defines body for PatchUserSecretsSecretId for application/json ContentType.
type PatchUserSecretsSecretIdJSONRequestBody = SecretPatch

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetError request
	GetError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPreferences request
	GetUserPreferences(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserPreferencesDismissProjectMigrationBanner request
	DeleteUserPreferencesDismissProjectMigrationBanner(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserPreferencesDismissProjectMigrationBanner request
	PostUserPreferencesDismissProjectMigrationBanner(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserPreferencesPinnedProjects request
	DeleteUserPreferencesPinnedProjects(ctx context.Context, params *DeleteUserPreferencesPinnedProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserPreferencesPinnedProjectsWithBody request with any body
	PostUserPreferencesPinnedProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserPreferencesPinnedProjects(ctx context.Context, body PostUserPreferencesPinnedProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserSecretKey request
	GetUserSecretKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserSecrets request
	GetUserSecrets(ctx context.Context, params *GetUserSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserSecretsWithBody request with any body
	PostUserSecretsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserSecrets(ctx context.Context, body PostUserSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserSecretsSecretId request
	DeleteUserSecretsSecretId(ctx context.Context, secretId Ulid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserSecretsSecretId request
	GetUserSecretsSecretId(ctx context.Context, secretId Ulid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUserSecretsSecretIdWithBody request with any body
	PatchUserSecretsSecretIdWithBody(ctx context.Context, secretId Ulid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUserSecretsSecretId(ctx context.Context, secretId Ulid, body PatchUserSecretsSecretIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersUserId request
	DeleteUsersUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUserId request
	GetUsersUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetErrorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPreferences(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPreferencesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserPreferencesDismissProjectMigrationBanner(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserPreferencesDismissProjectMigrationBannerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserPreferencesDismissProjectMigrationBanner(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserPreferencesDismissProjectMigrationBannerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserPreferencesPinnedProjects(ctx context.Context, params *DeleteUserPreferencesPinnedProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserPreferencesPinnedProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserPreferencesPinnedProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserPreferencesPinnedProjectsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserPreferencesPinnedProjects(ctx context.Context, body PostUserPreferencesPinnedProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserPreferencesPinnedProjectsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserSecretKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSecretKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserSecrets(ctx context.Context, params *GetUserSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSecretsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserSecretsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserSecretsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserSecrets(ctx context.Context, body PostUserSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserSecretsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserSecretsSecretId(ctx context.Context, secretId Ulid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserSecretsSecretIdRequest(c.Server, secretId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserSecretsSecretId(ctx context.Context, secretId Ulid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSecretsSecretIdRequest(c.Server, secretId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserSecretsSecretIdWithBody(ctx context.Context, secretId Ulid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserSecretsSecretIdRequestWithBody(c.Server, secretId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserSecretsSecretId(ctx context.Context, secretId Ulid, body PatchUserSecretsSecretIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserSecretsSecretIdRequest(c.Server, secretId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetErrorRequest generates requests for GetError
func NewGetErrorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserPreferencesRequest generates requests for GetUserPreferences
func NewGetUserPreferencesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/preferences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserPreferencesDismissProjectMigrationBannerRequest generates requests for DeleteUserPreferencesDismissProjectMigrationBanner
func NewDeleteUserPreferencesDismissProjectMigrationBannerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/preferences/dismiss_project_migration_banner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserPreferencesDismissProjectMigrationBannerRequest generates requests for PostUserPreferencesDismissProjectMigrationBanner
func NewPostUserPreferencesDismissProjectMigrationBannerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/preferences/dismiss_project_migration_banner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserPreferencesPinnedProjectsRequest generates requests for DeleteUserPreferencesPinnedProjects
func NewDeleteUserPreferencesPinnedProjectsRequest(server string, params *DeleteUserPreferencesPinnedProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/preferences/pinned_projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DeletePinnedParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "delete_pinned_params", runtime.ParamLocationQuery, *params.DeletePinnedParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserPreferencesPinnedProjectsRequest calls the generic PostUserPreferencesPinnedProjects builder with application/json body
func NewPostUserPreferencesPinnedProjectsRequest(server string, body PostUserPreferencesPinnedProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserPreferencesPinnedProjectsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserPreferencesPinnedProjectsRequestWithBody generates requests for PostUserPreferencesPinnedProjects with any type of body
func NewPostUserPreferencesPinnedProjectsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/preferences/pinned_projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserSecretKeyRequest generates requests for GetUserSecretKey
func NewGetUserSecretKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/secret_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserSecretsRequest generates requests for GetUserSecrets
func NewGetUserSecretsRequest(server string, params *GetUserSecretsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserSecretsParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_secrets_params", runtime.ParamLocationQuery, *params.UserSecretsParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserSecretsRequest calls the generic PostUserSecrets builder with application/json body
func NewPostUserSecretsRequest(server string, body PostUserSecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserSecretsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserSecretsRequestWithBody generates requests for PostUserSecrets with any type of body
func NewPostUserSecretsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserSecretsSecretIdRequest generates requests for DeleteUserSecretsSecretId
func NewDeleteUserSecretsSecretIdRequest(server string, secretId Ulid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secret_id", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserSecretsSecretIdRequest generates requests for GetUserSecretsSecretId
func NewGetUserSecretsSecretIdRequest(server string, secretId Ulid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secret_id", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUserSecretsSecretIdRequest calls the generic PatchUserSecretsSecretId builder with application/json body
func NewPatchUserSecretsSecretIdRequest(server string, secretId Ulid, body PatchUserSecretsSecretIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUserSecretsSecretIdRequestWithBody(server, secretId, "application/json", bodyReader)
}

// NewPatchUserSecretsSecretIdRequestWithBody generates requests for PatchUserSecretsSecretId with any type of body
func NewPatchUserSecretsSecretIdRequestWithBody(server string, secretId Ulid, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secret_id", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserParams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_params", runtime.ParamLocationQuery, *params.UserParams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUsersUserIdRequest generates requests for DeleteUsersUserId
func NewDeleteUsersUserIdRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersUserIdRequest generates requests for GetUsersUserId
func NewGetUsersUserIdRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetErrorWithResponse request
	GetErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetErrorResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetUserPreferencesWithResponse request
	GetUserPreferencesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserPreferencesResponse, error)

	// DeleteUserPreferencesDismissProjectMigrationBannerWithResponse request
	DeleteUserPreferencesDismissProjectMigrationBannerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteUserPreferencesDismissProjectMigrationBannerResponse, error)

	// PostUserPreferencesDismissProjectMigrationBannerWithResponse request
	PostUserPreferencesDismissProjectMigrationBannerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostUserPreferencesDismissProjectMigrationBannerResponse, error)

	// DeleteUserPreferencesPinnedProjectsWithResponse request
	DeleteUserPreferencesPinnedProjectsWithResponse(ctx context.Context, params *DeleteUserPreferencesPinnedProjectsParams, reqEditors ...RequestEditorFn) (*DeleteUserPreferencesPinnedProjectsResponse, error)

	// PostUserPreferencesPinnedProjectsWithBodyWithResponse request with any body
	PostUserPreferencesPinnedProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserPreferencesPinnedProjectsResponse, error)

	PostUserPreferencesPinnedProjectsWithResponse(ctx context.Context, body PostUserPreferencesPinnedProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserPreferencesPinnedProjectsResponse, error)

	// GetUserSecretKeyWithResponse request
	GetUserSecretKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserSecretKeyResponse, error)

	// GetUserSecretsWithResponse request
	GetUserSecretsWithResponse(ctx context.Context, params *GetUserSecretsParams, reqEditors ...RequestEditorFn) (*GetUserSecretsResponse, error)

	// PostUserSecretsWithBodyWithResponse request with any body
	PostUserSecretsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserSecretsResponse, error)

	PostUserSecretsWithResponse(ctx context.Context, body PostUserSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserSecretsResponse, error)

	// DeleteUserSecretsSecretIdWithResponse request
	DeleteUserSecretsSecretIdWithResponse(ctx context.Context, secretId Ulid, reqEditors ...RequestEditorFn) (*DeleteUserSecretsSecretIdResponse, error)

	// GetUserSecretsSecretIdWithResponse request
	GetUserSecretsSecretIdWithResponse(ctx context.Context, secretId Ulid, reqEditors ...RequestEditorFn) (*GetUserSecretsSecretIdResponse, error)

	// PatchUserSecretsSecretIdWithBodyWithResponse request with any body
	PatchUserSecretsSecretIdWithBodyWithResponse(ctx context.Context, secretId Ulid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserSecretsSecretIdResponse, error)

	PatchUserSecretsSecretIdWithResponse(ctx context.Context, secretId Ulid, body PatchUserSecretsSecretIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserSecretsSecretIdResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// DeleteUsersUserIdWithResponse request
	DeleteUsersUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteUsersUserIdResponse, error)

	// GetUsersUserIdWithResponse request
	GetUsersUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUsersUserIdResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)
}

type GetErrorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetErrorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetErrorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SelfUserInfo
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPreferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPreferences
	JSON404      *ErrorResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUserPreferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPreferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserPreferencesDismissProjectMigrationBannerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPreferences
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteUserPreferencesDismissProjectMigrationBannerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserPreferencesDismissProjectMigrationBannerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserPreferencesDismissProjectMigrationBannerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPreferences
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostUserPreferencesDismissProjectMigrationBannerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserPreferencesDismissProjectMigrationBannerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserPreferencesPinnedProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPreferences
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteUserPreferencesPinnedProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserPreferencesPinnedProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserPreferencesPinnedProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPreferences
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostUserPreferencesPinnedProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserPreferencesPinnedProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSecretKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserSecretKey
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUserSecretKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSecretKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretsList
	JSON404      *ErrorResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUserSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SecretWithId
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostUserSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserSecretsSecretIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteUserSecretsSecretIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserSecretsSecretIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSecretsSecretIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecretWithId
	JSON404      *ErrorResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUserSecretsSecretIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSecretsSecretIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUserSecretsSecretIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SecretWithId
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PatchUserSecretsSecretIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUserSecretsSecretIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersWithId
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserWithId
	JSON404      *ErrorResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Version
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetErrorWithResponse request returning *GetErrorResponse
func (c *ClientWithResponses) GetErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetErrorResponse, error) {
	rsp, err := c.GetError(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetErrorResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetUserPreferencesWithResponse request returning *GetUserPreferencesResponse
func (c *ClientWithResponses) GetUserPreferencesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserPreferencesResponse, error) {
	rsp, err := c.GetUserPreferences(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPreferencesResponse(rsp)
}

// DeleteUserPreferencesDismissProjectMigrationBannerWithResponse request returning *DeleteUserPreferencesDismissProjectMigrationBannerResponse
func (c *ClientWithResponses) DeleteUserPreferencesDismissProjectMigrationBannerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteUserPreferencesDismissProjectMigrationBannerResponse, error) {
	rsp, err := c.DeleteUserPreferencesDismissProjectMigrationBanner(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserPreferencesDismissProjectMigrationBannerResponse(rsp)
}

// PostUserPreferencesDismissProjectMigrationBannerWithResponse request returning *PostUserPreferencesDismissProjectMigrationBannerResponse
func (c *ClientWithResponses) PostUserPreferencesDismissProjectMigrationBannerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostUserPreferencesDismissProjectMigrationBannerResponse, error) {
	rsp, err := c.PostUserPreferencesDismissProjectMigrationBanner(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserPreferencesDismissProjectMigrationBannerResponse(rsp)
}

// DeleteUserPreferencesPinnedProjectsWithResponse request returning *DeleteUserPreferencesPinnedProjectsResponse
func (c *ClientWithResponses) DeleteUserPreferencesPinnedProjectsWithResponse(ctx context.Context, params *DeleteUserPreferencesPinnedProjectsParams, reqEditors ...RequestEditorFn) (*DeleteUserPreferencesPinnedProjectsResponse, error) {
	rsp, err := c.DeleteUserPreferencesPinnedProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserPreferencesPinnedProjectsResponse(rsp)
}

// PostUserPreferencesPinnedProjectsWithBodyWithResponse request with arbitrary body returning *PostUserPreferencesPinnedProjectsResponse
func (c *ClientWithResponses) PostUserPreferencesPinnedProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserPreferencesPinnedProjectsResponse, error) {
	rsp, err := c.PostUserPreferencesPinnedProjectsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserPreferencesPinnedProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostUserPreferencesPinnedProjectsWithResponse(ctx context.Context, body PostUserPreferencesPinnedProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserPreferencesPinnedProjectsResponse, error) {
	rsp, err := c.PostUserPreferencesPinnedProjects(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserPreferencesPinnedProjectsResponse(rsp)
}

// GetUserSecretKeyWithResponse request returning *GetUserSecretKeyResponse
func (c *ClientWithResponses) GetUserSecretKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserSecretKeyResponse, error) {
	rsp, err := c.GetUserSecretKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSecretKeyResponse(rsp)
}

// GetUserSecretsWithResponse request returning *GetUserSecretsResponse
func (c *ClientWithResponses) GetUserSecretsWithResponse(ctx context.Context, params *GetUserSecretsParams, reqEditors ...RequestEditorFn) (*GetUserSecretsResponse, error) {
	rsp, err := c.GetUserSecrets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSecretsResponse(rsp)
}

// PostUserSecretsWithBodyWithResponse request with arbitrary body returning *PostUserSecretsResponse
func (c *ClientWithResponses) PostUserSecretsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserSecretsResponse, error) {
	rsp, err := c.PostUserSecretsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserSecretsResponse(rsp)
}

func (c *ClientWithResponses) PostUserSecretsWithResponse(ctx context.Context, body PostUserSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserSecretsResponse, error) {
	rsp, err := c.PostUserSecrets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserSecretsResponse(rsp)
}

// DeleteUserSecretsSecretIdWithResponse request returning *DeleteUserSecretsSecretIdResponse
func (c *ClientWithResponses) DeleteUserSecretsSecretIdWithResponse(ctx context.Context, secretId Ulid, reqEditors ...RequestEditorFn) (*DeleteUserSecretsSecretIdResponse, error) {
	rsp, err := c.DeleteUserSecretsSecretId(ctx, secretId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserSecretsSecretIdResponse(rsp)
}

// GetUserSecretsSecretIdWithResponse request returning *GetUserSecretsSecretIdResponse
func (c *ClientWithResponses) GetUserSecretsSecretIdWithResponse(ctx context.Context, secretId Ulid, reqEditors ...RequestEditorFn) (*GetUserSecretsSecretIdResponse, error) {
	rsp, err := c.GetUserSecretsSecretId(ctx, secretId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSecretsSecretIdResponse(rsp)
}

// PatchUserSecretsSecretIdWithBodyWithResponse request with arbitrary body returning *PatchUserSecretsSecretIdResponse
func (c *ClientWithResponses) PatchUserSecretsSecretIdWithBodyWithResponse(ctx context.Context, secretId Ulid, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserSecretsSecretIdResponse, error) {
	rsp, err := c.PatchUserSecretsSecretIdWithBody(ctx, secretId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserSecretsSecretIdResponse(rsp)
}

func (c *ClientWithResponses) PatchUserSecretsSecretIdWithResponse(ctx context.Context, secretId Ulid, body PatchUserSecretsSecretIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserSecretsSecretIdResponse, error) {
	rsp, err := c.PatchUserSecretsSecretId(ctx, secretId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserSecretsSecretIdResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// DeleteUsersUserIdWithResponse request returning *DeleteUsersUserIdResponse
func (c *ClientWithResponses) DeleteUsersUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteUsersUserIdResponse, error) {
	rsp, err := c.DeleteUsersUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersUserIdResponse(rsp)
}

// GetUsersUserIdWithResponse request returning *GetUsersUserIdResponse
func (c *ClientWithResponses) GetUsersUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUsersUserIdResponse, error) {
	rsp, err := c.GetUsersUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUserIdResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseGetErrorResponse parses an HTTP response from a GetErrorWithResponse call
func ParseGetErrorResponse(rsp *http.Response) (*GetErrorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetErrorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SelfUserInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserPreferencesResponse parses an HTTP response from a GetUserPreferencesWithResponse call
func ParseGetUserPreferencesResponse(rsp *http.Response) (*GetUserPreferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPreferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPreferences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteUserPreferencesDismissProjectMigrationBannerResponse parses an HTTP response from a DeleteUserPreferencesDismissProjectMigrationBannerWithResponse call
func ParseDeleteUserPreferencesDismissProjectMigrationBannerResponse(rsp *http.Response) (*DeleteUserPreferencesDismissProjectMigrationBannerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserPreferencesDismissProjectMigrationBannerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPreferences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUserPreferencesDismissProjectMigrationBannerResponse parses an HTTP response from a PostUserPreferencesDismissProjectMigrationBannerWithResponse call
func ParsePostUserPreferencesDismissProjectMigrationBannerResponse(rsp *http.Response) (*PostUserPreferencesDismissProjectMigrationBannerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserPreferencesDismissProjectMigrationBannerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPreferences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteUserPreferencesPinnedProjectsResponse parses an HTTP response from a DeleteUserPreferencesPinnedProjectsWithResponse call
func ParseDeleteUserPreferencesPinnedProjectsResponse(rsp *http.Response) (*DeleteUserPreferencesPinnedProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserPreferencesPinnedProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPreferences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUserPreferencesPinnedProjectsResponse parses an HTTP response from a PostUserPreferencesPinnedProjectsWithResponse call
func ParsePostUserPreferencesPinnedProjectsResponse(rsp *http.Response) (*PostUserPreferencesPinnedProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserPreferencesPinnedProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPreferences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserSecretKeyResponse parses an HTTP response from a GetUserSecretKeyWithResponse call
func ParseGetUserSecretKeyResponse(rsp *http.Response) (*GetUserSecretKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSecretKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSecretKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserSecretsResponse parses an HTTP response from a GetUserSecretsWithResponse call
func ParseGetUserSecretsResponse(rsp *http.Response) (*GetUserSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostUserSecretsResponse parses an HTTP response from a PostUserSecretsWithResponse call
func ParsePostUserSecretsResponse(rsp *http.Response) (*PostUserSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SecretWithId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteUserSecretsSecretIdResponse parses an HTTP response from a DeleteUserSecretsSecretIdWithResponse call
func ParseDeleteUserSecretsSecretIdResponse(rsp *http.Response) (*DeleteUserSecretsSecretIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserSecretsSecretIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserSecretsSecretIdResponse parses an HTTP response from a GetUserSecretsSecretIdWithResponse call
func ParseGetUserSecretsSecretIdResponse(rsp *http.Response) (*GetUserSecretsSecretIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSecretsSecretIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecretWithId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchUserSecretsSecretIdResponse parses an HTTP response from a PatchUserSecretsSecretIdWithResponse call
func ParsePatchUserSecretsSecretIdResponse(rsp *http.Response) (*PatchUserSecretsSecretIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUserSecretsSecretIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SecretWithId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersWithId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteUsersUserIdResponse parses an HTTP response from a DeleteUsersUserIdWithResponse call
func ParseDeleteUsersUserIdResponse(rsp *http.Response) (*DeleteUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUsersUserIdResponse parses an HTTP response from a GetUsersUserIdWithResponse call
func ParseGetUsersUserIdResponse(rsp *http.Response) (*GetUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserWithId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Version
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
